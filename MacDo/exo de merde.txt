/* 
Simulation de commandes en cascade
Objectifs :
- Maîtriser les callbacks imbriqués (nested callbacks).
- Apprendre à gérer plusieurs opérations séquentielles en Node.js.
- Comprendre la gestion des erreurs avec plusieurs callbacks.

resto/
├── commande.js
├── preparation.js
├── livraison.js
└── index.js

Fichier commande.js
Consigne :
- Crée une fonction prendreCommande(produit, callback).
- Génère un numéro de commande aléatoire (nombre entier).
- Affiche la prise de commande.
- Passe ce numéro via callback à la fonction suivante.

Fichier preparation.js
Consigne :
- Crée une fonction preparerCommande(numeroCommande, callback).
- Reçoit le numéro généré précédemment et l'affiche.
- Simule la préparation avec un délai.
- Passe à la fonction suivante via callback une fois la préparation terminée.

Fichier livraison.js
Consigne :
- Crée une fonction livrerCommande(numeroCommande, adresseLivraison, callback).
- Affiche le numéro de commande reçu et l'adresse fournie.
- Simule la livraison avec un délai.
- Appelle le callback à la fin avec un message de succès.

Fichier principal index.js
Consigne :

- Appelle les fonctions précédentes en cascade avec des callbacks imbriqués.
- Fournis un produit et une adresse en paramètre initial.
- Gère correctement les erreurs à chaque étape.





Résultat attendu :

 [Commande] Produit commandé : Hamburger Double Cheese
 [Commande] Numéro généré : 8364
 [Préparation] Préparation commande N°8364...
 [Préparation] Commande N°8364 prête !
 [Livraison] Commande N°8364 en cours de livraison à "42 rue Node.js"...
 [Livraison] Commande N°8364 livrée à "42 rue Node.js".
 [Succès] État final : Livraison réussie
*/